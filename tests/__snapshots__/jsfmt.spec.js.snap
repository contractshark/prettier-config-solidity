// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Blanklines.sol 1`] = `
pragma solidity >=0.4.0 <0.7.0;

contract A {}

contract B {}

contract C {}

contract A {
    function spam() public pure {
        // ...
    }

    function ham() public pure {
        // ...
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity >=0.4.0 <0.7.0;

contract A {}

contract B {}

contract C {}

contract A {
    function spam() public pure {
        // ...
    }

    function ham() public pure {
        // ...
    }
}

`;

exports[`Blanklines.sol 2`] = `
pragma solidity >=0.4.0 <0.7.0;

contract A {}

contract B {}

contract C {}

contract A {
    function spam() public pure {
        // ...
    }

    function ham() public pure {
        // ...
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity >=0.4.0 <0.7.0;

contract A {}

contract B {}

contract C {}

contract A {
    function spam() public pure {
        // ...
    }

    function ham() public pure {
        // ...
    }
}

`;

exports[`Quotes.sol 1`] = `
import "someContract.sol";
import "someOtherContract.sol";

contract Foo {
    string foo1 = "foo";
    string foo2 = "foo";
    string spaces1 = "the quick brown fox";
    string spaces2 = "the quick brown fox";
    string singleQuote = "don't do that";
    string escapedSingleQuote = "don't do that";
    string doubleQuote = 'Use " for quoting';
    string escapedDoubleQuote = 'Use " for quoting';
    string singleQuotes = "don't do that, don't";
    string escapedSingleQuotes = "don't do that, don't";
    string doubleQuotes = 'The "quick" brown fox';
    string escapeDoubleQuotes = 'The "quick" brown fox';
    string hex1 = hex"DeadBeef";
    string hex2 = hex"DeadBeef";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import 'someContract.sol';
import 'someOtherContract.sol';

contract Foo {
    string foo1 = 'foo';
    string foo2 = 'foo';
    string spaces1 = 'the quick brown fox';
    string spaces2 = 'the quick brown fox';
    string singleQuote = "don't do that";
    string escapedSingleQuote = "don't do that";
    string doubleQuote = 'Use " for quoting';
    string escapedDoubleQuote = 'Use " for quoting';
    string singleQuotes = "don't do that, don't";
    string escapedSingleQuotes = "don't do that, don't";
    string doubleQuotes = 'The "quick" brown fox';
    string escapeDoubleQuotes = 'The "quick" brown fox';
    string hex1 = hex'DeadBeef';
    string hex2 = hex'DeadBeef';
}

`;

exports[`Quotes.sol 2`] = `
import "someContract.sol";
import "someOtherContract.sol";

contract Foo {
    string foo1 = "foo";
    string foo2 = "foo";
    string spaces1 = "the quick brown fox";
    string spaces2 = "the quick brown fox";
    string singleQuote = "don't do that";
    string escapedSingleQuote = "don't do that";
    string doubleQuote = 'Use " for quoting';
    string escapedDoubleQuote = 'Use " for quoting';
    string singleQuotes = "don't do that, don't";
    string escapedSingleQuotes = "don't do that, don't";
    string doubleQuotes = 'The "quick" brown fox';
    string escapeDoubleQuotes = 'The "quick" brown fox';
    string hex1 = hex"DeadBeef";
    string hex2 = hex"DeadBeef";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import "someContract.sol";
import "someOtherContract.sol";

contract Foo {
    string foo1 = "foo";
    string foo2 = "foo";
    string spaces1 = "the quick brown fox";
    string spaces2 = "the quick brown fox";
    string singleQuote = "don't do that";
    string escapedSingleQuote = "don't do that";
    string doubleQuote = 'Use " for quoting';
    string escapedDoubleQuote = 'Use " for quoting';
    string singleQuotes = "don't do that, don't";
    string escapedSingleQuotes = "don't do that, don't";
    string doubleQuotes = 'The "quick" brown fox';
    string escapeDoubleQuotes = 'The "quick" brown fox';
    string hex1 = hex"DeadBeef";
    string hex2 = hex"DeadBeef";
}

`;

exports[`WhitespaceInExpressions.sol 1`] = `
pragma solidity >=0.4.0 <0.7.0;

contract WhitespaceInExpressions {
    function() {
        spam(ham[1], Coin({name: "ham"}));
        x = 1;
        y = 2;
        long_variable = 3;
    }

    function spam(uint256 i, Coin coin) public;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity >=0.4.0 <0.7.0;

contract WhitespaceInExpressions {
    function() {
        spam(ham[1], Coin({name: 'ham'}));
        x = 1;
        y = 2;
        long_variable = 3;
    }

    function spam(uint256 i, Coin coin) public;
}

`;

exports[`WhitespaceInExpressions.sol 2`] = `
pragma solidity >=0.4.0 <0.7.0;

contract WhitespaceInExpressions {
    function() {
        spam(ham[1], Coin({name: "ham"}));
        x = 1;
        y = 2;
        long_variable = 3;
    }

    function spam(uint256 i, Coin coin) public;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity >=0.4.0 <0.7.0;

contract WhitespaceInExpressions {
    function() {
        spam(ham[1], Coin({name: "ham"}));
        x = 1;
        y = 2;
        long_variable = 3;
    }

    function spam(uint256 i, Coin coin) public;
}

`;
